/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Exercise;
import io.swagger.annotations.*;
import io.swagger.model.User;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-10-08T12:40:40.535Z[GMT]")
@Api(value = "exercises", description = "the exercises API")
public interface ExercisesApi {


    @ApiOperation(value = "Add a new exercise", nickname = "createNewExercise", notes = "", response = Exercise.class, responseContainer = "List", tags={ "Exercise", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Exercise.class, responseContainer = "List"),
            @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/excercises",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Exercise> createNewExercise(@ApiParam(value = "Exercises object that needs to be added to the gym" ,required=true )  @Valid @RequestBody Exercise ex);


    @ApiOperation(value = "Find exercises by its name and its keywords.", nickname = "getExercisesByName", notes = "", response = Exercise.class, responseContainer = "List", tags={ "Exercise", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Exercise.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Bad request"),
            @ApiResponse(code = 404, message = "Not found."),
            @ApiResponse(code = 200, message = "Unexpected error") })
    @RequestMapping(value = "/excercises/",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<Exercise>> getExercisesByName(@NotNull @ApiParam(value = "", required = false) @Valid @RequestParam(value = "exName", required = false) String exName,@NotNull @ApiParam(value = "", required = false) @Valid @RequestParam(value = "keyWords", required = false) String keyWords);


    @ApiOperation(value = "Delete exercise", nickname = "deleteExerciseById", notes = "Delete an exercise.", tags={ "Exercise", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid exId supplied"),
        @ApiResponse(code = 404, message = "Exercise not found") })
    @RequestMapping(value = "/exercises/{exId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Integer> deleteExerciseById(@ApiParam(value = "The name that needs to be deleted",required=true) @PathVariable("exId") String exId);


    @ApiOperation(value = "get exercise by its ID", nickname = "getExerciseById", notes = "", response = Exercise.class, tags={ "Exercise", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Exercise.class),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 404, message = "Exercise was not found"),
        @ApiResponse(code = 200, message = "Unexpected error") })
    @RequestMapping(value = "/exercises/{exId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Exercise> getExerciseById(@ApiParam(value = "Parameter description in CommonMark or HTML.",required=true) @PathVariable("exId") String exId);


    @ApiOperation(value = "Update an existing exercise", nickname = "updateExerciseById", notes = "", tags={ "Exercise", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Exercise not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/exercises/{exId}",
    //@RequestMapping(value = "/exercises/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Exercise> updateExercise(@ApiParam(value = "name that need to be updated",required=true) @Valid @RequestBody Exercise ex);

}
