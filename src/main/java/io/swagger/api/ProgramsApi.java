/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Program;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-10-08T12:40:40.535Z[GMT]")
@Api(value = "programs", description = "the programs API")
public interface ProgramsApi {



    @ApiOperation(value = "Add a new program", nickname = "createNewProgram", notes = "", response = Program.class, responseContainer = "List", tags={ "Program", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Program.class, responseContainer = "List"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/programs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Integer> createNewProgram(@ApiParam(value = "Program object that needs to be added to the gym" ,required=true )  @Valid @RequestBody Program prog,
                                             @NotNull @ApiParam(value = "", required = false)
                                             @Valid @RequestParam(value = "listSes", required = false) String listSes,
                                             @NotNull @ApiParam(value = "", required = false)
                                             @Valid @RequestParam(value = "coachId", required = false) String coachId);


    @ApiOperation(value = "Delete program", nickname = "deleteProgramById", notes = "Delete an program.", tags={ "Program", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid exId supplied"),
        @ApiResponse(code = 404, message = "Program not found") })
    @RequestMapping(value = "/programs/{proId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Integer> deleteProgramById(@ApiParam(value = "The name that needs to be deleted",required=true) @PathVariable("proId") String proId);


    @ApiOperation(value = "get program by its ID", nickname = "getProgramsById", notes = "", response = Program.class, tags={ "Program", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Program.class),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 404, message = "Exercise was not found"),
        @ApiResponse(code = 200, message = "Unexpected error") })
    @RequestMapping(value = "/programs/{proId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Program> getProgramsById(@ApiParam(value = "Parameter description in CommonMark or HTML.",required=true) @PathVariable("proId") String proId);


    @ApiOperation(value = "Find program by its name and its keywords.", nickname = "getProgramsByName", notes = "", response = Program.class, responseContainer = "List", tags={ "Program", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Program.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 404, message = "Not found."),
        @ApiResponse(code = 200, message = "Unexpected error") })
    @RequestMapping(value = "/programs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Program>> getProgramsByName(@NotNull @ApiParam(value = "", required = false) @Valid @RequestParam(value = "proName", required = false) String proName, @NotNull @ApiParam(value = "", required = false) @Valid @RequestParam(value = "keyWords", required = false) String keyWords);


    @ApiOperation(value = "Update an existing program", nickname = "updateProgram", notes = "", tags={ "Program", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Program not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/programs",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Program> updateProgram(@ApiParam(value = "name that need to be updated",required=true) @Valid @RequestBody Program prog);

    @ApiOperation(value = "Update an existing program", nickname = "updateProgramSessions", notes = "", tags={ "Program", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK"),
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Session not found"),
            @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/programs/sessions",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Integer> updateProgramSessions(@ApiParam(value = "",required=true) @Valid @RequestBody Program prog,
                                                   @NotNull @ApiParam(value = "", required = false)
                                                   @Valid @RequestParam(value = "listSes", required = false) String listSes,
                                                   @NotNull @ApiParam(value = "", required = false)
                                                   @Valid @RequestParam(value = "coachId", required = false) String coachId);

}
